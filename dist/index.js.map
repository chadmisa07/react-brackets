{"version":3,"file":"index.js","sources":["../src/components/round.ts","../src/hooks/useMedia.tsx","../src/components/seed.ts","../src/utils/renders.tsx","../src/brackets/index.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport interface RoundProps {\n  seeds: any[];\n  title: string;\n  [key: string]: any;\n}\n\ninterface BreakPoint {\n  mobileBreakpoint?: number;\n}\n\nexport const Bracket = styled.div<BreakPoint>(\n  (props) => `\n  display: flex;\n  flex-direction: row;\n  @media (max-width: ${props.mobileBreakpoint}px) {\n    flex-direction: column;\n  }\n  `\n);\n\nexport const Round = styled.div<BreakPoint>(\n  (props) => `\n  flex: 0;\n  // min-width:300px;\n  display:flex;\n  flex-direction:column;\n  @media (max-width: ${props.mobileBreakpoint}px) {\n    min-width:0;\n  }\n  `\n);\n\nexport const RoundTitle = styled.div`\n  color: #8f8f8f;\n  font-weight: 400;\n  text-align: center;\n  position: sticky;\n  top: 0;\n  z-index: 2;\n`;\nexport const SeedsList = styled.div`\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  flex-flow: row wrap;\n  justify-content: center;\n  height: 100%;\n  list-style: none;\n`;\n","import { useState, useEffect } from 'react';\n\nexport default function useMedia(breakPoint: number) {\n  // checking window object to support server side rendering.\n  const [isSmaller, setIsSmaller] = useState(typeof window !== 'undefined' ? window.innerWidth <= breakPoint : false);\n\n  useEffect(() => {\n    function screenResized() {\n      // To make sure that the state is only being updated when it has to be\n      if (isSmaller && window.innerWidth > breakPoint) {\n        setIsSmaller(false);\n      } else if (!isSmaller && window.innerWidth <= breakPoint) {\n        setIsSmaller(true);\n      }\n    }\n    if (typeof window !== 'undefined') window.addEventListener('resize', screenResized);\n\n    // to remove the event listener when this component is unmounted.\n    return () => {\n      if (typeof window !== 'undefined') window.removeEventListener('resize', screenResized);\n    };\n  }, [isSmaller]);\n\n  // the return value should be true or false\n  return isSmaller;\n}\n","import styled from 'styled-components';\n\nexport interface SeedProps {\n  mobileBreakpoint?: number;\n}\nexport interface SeedTimeProps {\n  mobileBreakpoint?: number;\n}\n\nexport const SeedItem = styled.div`\n  color: #fff;\n  width: 100%;\n  background-color: #1a1d2e;\n  padding: 0;\n  border-radius: 0.2em;\n  box-shadow: 0 2px 4px -2px #111630;\n  text-align: center;\n  position: relative;\n  height: 32px;\n`;\n\nexport const SeedTeam = styled.div`\n  padding: 0.3rem 0.5rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-radius: 0.2em;\n  align-items: center;\n`;\n\nexport const SeedTime = styled.div<SeedTimeProps>(\n  (props) => `\nmargin-top: 2px;\nfont-size: 12px;\ncolor: #8f8f8f;\nheight: 0;\n@media (max-width: ${props.mobileBreakpoint}px) {\n  height:auto;\n}\n`\n);\n\n/*\n * Difference between \"SingleLineSeed\" and \"Seed\" is that single line seed\n * will directly connect to the next node, it's good for double elimination losing brackets.\n *\n * The best behavior in such case is, to check if the next round seeds matches the current round seeds\n */\n\nexport const SingleLineSeed = styled.div<SeedProps>(\n  (props) => `\npadding: 2em 1.5em;\nmin-width: 244px;\nwidth:100%;\nposition: relative;\ndisplay: flex;\nalign-items: center;\nflex: 0 1 auto;\nflex-direction: column;\njustify-content: center;\nfont-size: 14px;\n@media (max-width: ${props.mobileBreakpoint}px) {\n  width:100%;\n}\n@media (min-width: ${(props.mobileBreakpoint || 0) + 1}px) {\n  &::after {\n      content: \"\";\n      position: absolute;\n      height: 50%;\n      width: 3em;\n    [dir=\"rtl\"] & {\n      left: -1.5em;\n    }\n    [dir=\"ltr\"] & {\n      right: -1.5em;\n    }\n  }\n  &:nth-child(even)::after {\n    border-bottom: 1px solid #707070;\n    top: 16.5px;\n  }\n  &:nth-child(odd)::after {\n    border-top: 1px solid #707070;\n    top: calc(50% - -15px);\n  }\n}\n`\n);\n\nexport const Seed = styled.div<SeedProps>(\n  (props) => `\n  padding: 2em 1.5em;\n  min-width: 244px;\n  width:100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  flex: 0 1 auto;\n  flex-direction: column;\n  justify-content: center;\n  font-size: 14px;\n  @media (max-width: ${props.mobileBreakpoint}px) {\n    width:100%;\n  }\n  @media (min-width: ${(props.mobileBreakpoint || 0) + 1}px) {\n    &::after {\n        content: \"\";\n        position: absolute;\n        height: calc(50% - -15px);\n        width: 1.5em;\n      [dir=\"rtl\"] & {\n        left: 0px;\n      }\n      [dir=\"ltr\"] & {\n        right: 0px;\n      }\n    }\n\n    &:nth-child(even)::before{\n      content:'';\n      border-top: 1px solid #707070;\n      position:absolute;\n      top: 15px;\n      width:1.5em;\n      [dir=\"rtl\"] & {\n        left:-1.5em;\n        }\n      [dir=\"ltr\"] & {\n        right:-1.5em;\n      }\n    }\n\n    &:nth-child(even)::after {\n      border-bottom: 1px solid #707070;\n      top: 1.5px;\n     [dir=\"rtl\"] & {\n        border-left: 1px solid #707070;\n        }\n      [dir=\"ltr\"] & {\n        border-right: 1px solid #707070;\n      }\n    }\n    &:nth-child(odd):not(:last-child)::after {\n      border-top: 1px solid #707070;\n      top: calc(50% - -15px);\n      [dir=\"rtl\"] & {\n        border-left: 1px solid #707070;\n        }\n      [dir=\"ltr\"] & {\n        border-right: 1px solid #707070;\n      }\n    }\n}\n`\n);\n","import React, { ReactNode } from 'react';\nimport { Seed, SeedItem, SeedTeam, SeedTime } from '../components/seed';\nimport { RoundTitle } from '../components/round';\nimport { RenderSeedProps } from '../brackets';\n\n/* ------------------------- default title component ------------------------ */\nexport const renderTitle = (title: ReactNode) => <RoundTitle>{title}</RoundTitle>;\n\n/* ------------------------- default seed component ------------------------- */\nexport const renderSeed = ({ seed, breakpoint }: RenderSeedProps) => {\n  return (\n    <Seed mobileBreakpoint={breakpoint}>\n      <SeedItem>\n        <div>\n          <SeedTeam>{seed.teams?.[0]?.name || '-----------'}</SeedTeam>\n          <SeedTeam>{seed.teams?.[1]?.name || '-----------'}</SeedTeam>\n        </div>\n      </SeedItem>\n      <SeedTime mobileBreakpoint={breakpoint}>{seed.date}</SeedTime>\n    </Seed>\n  );\n};\n","import React, { Fragment, ReactNode } from 'react';\nimport { Round, Bracket, SeedsList, RoundProps } from '../components/round';\nimport SwipeableViews, { SwipeableViewsProps } from 'react-swipeable-views';\nimport useMedia from '../hooks/useMedia';\nimport { renderSeed, renderTitle } from '../utils/renders';\n\nexport interface RenderSeedProps {\n  seed: any;\n  breakpoint: number;\n  roundIndex: number;\n  seedIndex: number;\n  isConsolationMatch: boolean;\n}\n\nexport interface SingleEliminationProps {\n  // If true, the component direction will be set to RTL\n  rtl?: boolean;\n  // Array of rounds matching RoundProps shape,\n  rounds: RoundProps[];\n  // Single round className\n  roundClassName?: string;\n  /** @default 992, if you don't want a mobile breakpoint, pass 0 */\n  mobileBreakpoint?: number;\n  // The whole bracket className\n  bracketClassName?: string;\n  /** {@link https://github.com/oliviertassinari/react-swipeable-views} to read about it's props  */\n  swipeableProps?: SwipeableViewsProps;\n  /**\n   * @param {ReactNode} title string or component passed with each round\n   * @param {number} round the current round index\n   */\n  roundTitleComponent?: (title: ReactNode, roundIdx: number) => any;\n  /**\n   * @param {object} seed the current seed\n   * @param {number} breakpoint the breakpoint used to determine responsive size\n   * @param {number} roundIdx the current round index\n   */\n  renderSeedComponent?: ({ seed, breakpoint, roundIndex, seedIndex }: RenderSeedProps) => any;\n\n  consolationMatch?: any;\n}\n\nconst SingleElimination = ({\n  rounds,\n  rtl = false,\n  bracketClassName,\n  swipeableProps = {},\n  mobileBreakpoint = 992,\n  renderSeedComponent = renderSeed,\n  roundTitleComponent = renderTitle,\n  consolationMatch,\n}: SingleEliminationProps) => {\n  // Checking responsive size\n  const isResponsive = useMedia(mobileBreakpoint);\n  const data = rounds.map((round, roundIdx) => {\n    const byeMatches = round.seeds.filter((s) => {\n      if (round.seeds[0].data.bracketNum === 1) {\n        return s.formattedData.entrantA.name === 'BYE' || s.formattedData.entrantB.name === 'BYE';\n      }\n\n      return s.formattedData.entrantA.name === 'BYE' && s.formattedData.entrantB.name === 'BYE';\n    });\n    if (byeMatches.length === round.seeds.length) return null;\n\n    return (\n      <Fragment key={roundIdx}>\n        <Round\n          className={`round-container ${round.isFirstRound ? 'first-round' : ''}`}\n          mobileBreakpoint={mobileBreakpoint}\n        >\n          {round.title && roundTitleComponent(round.title, roundIdx)}\n          <SeedsList className='seed-list'>\n            {round.seeds.map((seed, idx) => (\n              <Fragment key={idx}>\n                {renderSeedComponent({\n                  seed,\n                  breakpoint: mobileBreakpoint,\n                  roundIndex: roundIdx,\n                  seedIndex: idx,\n                  isConsolationMatch: false,\n                })}\n              </Fragment>\n            ))}\n          </SeedsList>\n        </Round>\n\n        {consolationMatch && roundIdx + 1 === rounds.length ? (\n          <Round className='round-container' mobileBreakpoint={mobileBreakpoint}>\n            {roundTitleComponent('     ', roundIdx)}\n            <SeedsList className='seed-list consolation-match'>\n              <Fragment>\n                {renderSeedComponent({\n                  seed: consolationMatch.seeds[0],\n                  breakpoint: mobileBreakpoint,\n                  roundIndex: roundIdx,\n                  seedIndex: 0,\n                  isConsolationMatch: true,\n                })}\n              </Fragment>\n            </SeedsList>\n          </Round>\n        ) : null}\n      </Fragment>\n    );\n  });\n\n  if (isResponsive) {\n    // Since SwipeableViewsProps have an issue that it uses ref inside of it, We need to remove ref from the object\n    const { ref, ...rest } = swipeableProps;\n    return (\n      <Bracket className={bracketClassName} dir={rtl ? 'rtl' : 'ltr'} mobileBreakpoint={mobileBreakpoint}>\n        <SwipeableViews style={{ minHeight: '500px' }} axis={rtl ? 'x-reverse' : 'x'} {...rest}>\n          {data}\n        </SwipeableViews>\n      </Bracket>\n    );\n  }\n  return (\n    <Bracket className={bracketClassName} dir={rtl ? 'rtl' : 'ltr'} mobileBreakpoint={mobileBreakpoint}>\n      {data}\n    </Bracket>\n  );\n};\n\nexport default SingleElimination;\n"],"names":["Bracket","styled","div","props","mobileBreakpoint","Round","RoundTitle","SeedsList","useMedia","breakPoint","useState","window","innerWidth","isSmaller","setIsSmaller","useEffect","screenResized","addEventListener","removeEventListener","SeedItem","SeedTeam","SeedTime","SingleLineSeed","Seed","renderTitle","title","React","renderSeed","seed","breakpoint","teams","name","date","SingleElimination","rounds","rtl","bracketClassName","swipeableProps","renderSeedComponent","roundTitleComponent","consolationMatch","isResponsive","data","map","round","roundIdx","byeMatches","seeds","filter","s","bracketNum","formattedData","entrantA","entrantB","length","Fragment","key","className","isFirstRound","idx","roundIndex","seedIndex","isConsolationMatch","rest","dir","SwipeableViews","style","minHeight","axis"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYO,IAAMA,OAAO,GAAGC,MAAM,CAACC,GAAP,CACrB,UAACC,KAAD;AAAA,+EAGqBA,KAAK,CAACC,gBAH3B;AAAA,CADqB,CAAhB;AAUA,IAAMC,KAAK,GAAGJ,MAAM,CAACC,GAAP,CACnB,UAACC,KAAD;AAAA,mHAKqBA,KAAK,CAACC,gBAL3B;AAAA,CADmB,CAAd;AAYA,IAAME,UAAU,GAAGL,MAAM,CAACC,GAAV,0LAAhB;AAQA,IAAMK,SAAS,GAAGN,MAAM,CAACC,GAAV,kPAAf;;SCxCiBM,SAASC;AAE/B,kBAAkCC,cAAQ,CAAC,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAM,CAACC,UAAP,IAAqBH,UAArD,GAAkE,KAAnE,CAA1C;AAAA,MAAOI,SAAP;AAAA,MAAkBC,YAAlB;;AAEAC,EAAAA,eAAS,CAAC;AACR,aAASC,aAAT;AAEE,UAAIH,SAAS,IAAIF,MAAM,CAACC,UAAP,GAAoBH,UAArC,EAAiD;AAC/CK,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAFD,MAEO,IAAI,CAACD,SAAD,IAAcF,MAAM,CAACC,UAAP,IAAqBH,UAAvC,EAAmD;AACxDK,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF;;AACD,QAAI,OAAOH,MAAP,KAAkB,WAAtB,EAAmCA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCD,aAAlC;AAGnC,WAAO;AACL,UAAI,OAAOL,MAAP,KAAkB,WAAtB,EAAmCA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC;AACpC,KAFD;AAGD,GAfQ,EAeN,CAACH,SAAD,CAfM,CAAT;AAkBA,SAAOA,SAAP;AACD;;;IChBYM,QAAQ,GAAGlB,MAAM,CAACC,GAAV,4RAAd;AAYP,IAAakB,QAAQ,GAAGnB,MAAM,CAACC,GAAV,2OAAd;AASP,IAAamB,QAAQ,GAAGpB,MAAM,CAACC,GAAP,CACtB,UAACC,KAAD;AAAA,oGAKmBA,KAAK,CAACC,gBALzB;AAAA,CADsB,CAAjB;AAmBP,IAAakB,cAAc,GAAGrB,MAAM,CAACC,GAAP,CAC5B,UAACC,KAAD;AAAA,yOAWmBA,KAAK,CAACC,gBAXzB,qDAcmB,CAACD,KAAK,CAACC,gBAAN,IAA0B,CAA3B,IAAgC,CAdnD;AAAA,CAD4B,CAAvB;AAwCP,IAAamB,IAAI,GAAGtB,MAAM,CAACC,GAAP,CAClB,UAACC,KAAD;AAAA,+PAWqBA,KAAK,CAACC,gBAX3B,2DAcqB,CAACD,KAAK,CAACC,gBAAN,IAA0B,CAA3B,IAAgC,CAdrD;AAAA,CADkB,CAAb;;ACnFA,IAAMoB,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD;AAAA,SAAsBC,4BAAA,CAACpB,UAAD,MAAA,EAAamB,KAAb,CAAtB;AAAA,CAApB;AAGP,AAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;;;MAAGC,YAAAA;MAAMC,kBAAAA;AACjC,SACEH,4BAAA,CAACH,IAAD;AAAMnB,IAAAA,gBAAgB,EAAEyB;GAAxB,EACEH,4BAAA,CAACP,QAAD,MAAA,EACEO,4BAAA,MAAA,MAAA,EACEA,4BAAA,CAACN,QAAD,MAAA,EAAW,gBAAAQ,IAAI,CAACE,KAAL,4EAAa,CAAb,+DAAiBC,IAAjB,KAAyB,aAApC,CADF,EAEEL,4BAAA,CAACN,QAAD,MAAA,EAAW,iBAAAQ,IAAI,CAACE,KAAL,+EAAa,CAAb,iEAAiBC,IAAjB,KAAyB,aAApC,CAFF,CADF,CADF,EAOEL,4BAAA,CAACL,QAAD;AAAUjB,IAAAA,gBAAgB,EAAEyB;GAA5B,EAAyCD,IAAI,CAACI,IAA9C,CAPF,CADF;AAWD,CAZM;;;ACTP;AA0CA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;MACxBC,cAAAA;sBACAC;MAAAA,4BAAM;MACNC,wBAAAA;iCACAC;MAAAA,kDAAiB;mCACjBjC;MAAAA,sDAAmB;mCACnBkC;MAAAA,yDAAsBX;mCACtBY;MAAAA,yDAAsBf;MACtBgB,wBAAAA;AAGA,MAAMC,YAAY,GAAGjC,QAAQ,CAACJ,gBAAD,CAA7B;AACA,MAAMsC,IAAI,GAAGR,MAAM,CAACS,GAAP,CAAW,UAACC,KAAD,EAAQC,QAAR;AACtB,QAAMC,UAAU,GAAGF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmB,UAACC,CAAD;AACpC,UAAIL,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeL,IAAf,CAAoBQ,UAApB,KAAmC,CAAvC,EAA0C;AACxC,eAAOD,CAAC,CAACE,aAAF,CAAgBC,QAAhB,CAAyBrB,IAAzB,KAAkC,KAAlC,IAA2CkB,CAAC,CAACE,aAAF,CAAgBE,QAAhB,CAAyBtB,IAAzB,KAAkC,KAApF;AACD;;AAED,aAAOkB,CAAC,CAACE,aAAF,CAAgBC,QAAhB,CAAyBrB,IAAzB,KAAkC,KAAlC,IAA2CkB,CAAC,CAACE,aAAF,CAAgBE,QAAhB,CAAyBtB,IAAzB,KAAkC,KAApF;AACD,KANkB,CAAnB;AAOA,QAAIe,UAAU,CAACQ,MAAX,KAAsBV,KAAK,CAACG,KAAN,CAAYO,MAAtC,EAA8C,OAAO,IAAP;AAE9C,WACE5B,4BAAA,CAAC6B,cAAD;AAAUC,MAAAA,GAAG,EAAEX;KAAf,EACEnB,4BAAA,CAACrB,KAAD;AACEoD,MAAAA,SAAS,wBAAqBb,KAAK,CAACc,YAAN,GAAqB,aAArB,GAAqC,EAA1D;AACTtD,MAAAA,gBAAgB,EAAEA;KAFpB,EAIGwC,KAAK,CAACnB,KAAN,IAAec,mBAAmB,CAACK,KAAK,CAACnB,KAAP,EAAcoB,QAAd,CAJrC,EAKEnB,4BAAA,CAACnB,SAAD;AAAWkD,MAAAA,SAAS,EAAC;KAArB,EACGb,KAAK,CAACG,KAAN,CAAYJ,GAAZ,CAAgB,UAACf,IAAD,EAAO+B,GAAP;AAAA,aACfjC,4BAAA,CAAC6B,cAAD;AAAUC,QAAAA,GAAG,EAAEG;OAAf,EACGrB,mBAAmB,CAAC;AACnBV,QAAAA,IAAI,EAAJA,IADmB;AAEnBC,QAAAA,UAAU,EAAEzB,gBAFO;AAGnBwD,QAAAA,UAAU,EAAEf,QAHO;AAInBgB,QAAAA,SAAS,EAAEF,GAJQ;AAKnBG,QAAAA,kBAAkB,EAAE;AALD,OAAD,CADtB,CADe;AAAA,KAAhB,CADH,CALF,CADF,EAqBGtB,gBAAgB,IAAIK,QAAQ,GAAG,CAAX,KAAiBX,MAAM,CAACoB,MAA5C,GACC5B,4BAAA,CAACrB,KAAD;AAAOoD,MAAAA,SAAS,EAAC;AAAkBrD,MAAAA,gBAAgB,EAAEA;KAArD,EACGmC,mBAAmB,CAAC,OAAD,EAAUM,QAAV,CADtB,EAEEnB,4BAAA,CAACnB,SAAD;AAAWkD,MAAAA,SAAS,EAAC;KAArB,EACE/B,4BAAA,CAAC6B,cAAD,MAAA,EACGjB,mBAAmB,CAAC;AACnBV,MAAAA,IAAI,EAAEY,gBAAgB,CAACO,KAAjB,CAAuB,CAAvB,CADa;AAEnBlB,MAAAA,UAAU,EAAEzB,gBAFO;AAGnBwD,MAAAA,UAAU,EAAEf,QAHO;AAInBgB,MAAAA,SAAS,EAAE,CAJQ;AAKnBC,MAAAA,kBAAkB,EAAE;AALD,KAAD,CADtB,CADF,CAFF,CADD,GAeG,IApCN,CADF;AAwCD,GAlDY,CAAb;;AAoDA,MAAIrB,YAAJ,EAAkB;AAEhB,QAAgBsB,IAAhB,iCAAyB1B,cAAzB;;AACA,WACEX,4BAAA,CAAC1B,OAAD;AAASyD,MAAAA,SAAS,EAAErB;AAAkB4B,MAAAA,GAAG,EAAE7B,GAAG,GAAG,KAAH,GAAW;AAAO/B,MAAAA,gBAAgB,EAAEA;KAAlF,EACEsB,4BAAA,CAACuC,cAAD;AAAgBC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE;AAAb;AAAwBC,MAAAA,IAAI,EAAEjC,GAAG,GAAG,WAAH,GAAiB;OAAS4B,KAAlF,EACGrB,IADH,CADF,CADF;AAOD;;AACD,SACEhB,4BAAA,CAAC1B,OAAD;AAASyD,IAAAA,SAAS,EAAErB;AAAkB4B,IAAAA,GAAG,EAAE7B,GAAG,GAAG,KAAH,GAAW;AAAO/B,IAAAA,gBAAgB,EAAEA;GAAlF,EACGsC,IADH,CADF;AAKD,CAhFD;;;;;;;;;"}